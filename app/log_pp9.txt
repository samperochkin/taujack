
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Preprocessing of the raw data
> # launched with 
> # R CMD BATCH --vanilla --no-restore app/preprocessing.R app/log_pp.txt
> 
> # packages ----------------------------------------------------------------
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
✔ ggplot2 3.3.6     ✔ purrr   0.3.4
✔ tibble  3.1.8     ✔ dplyr   1.1.0
✔ tidyr   1.2.1     ✔ stringr 1.4.1
✔ readr   2.1.2     ✔ forcats 0.5.2
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(lunar)
> library(ggplot2)
> library(spatstat.geom) # weighted ecdf
Loading required package: spatstat.data
spatstat.geom 3.2-4
> 
> 
> 
> # load and preprocess data ------------------------------------------------
> stns_id <- readRDS("app/data/stns_id.rds")
> weathercan::stations() %>% filter(station_id %in% stns_id, interval == "day") %>%
+   print(nrow = nrow(.))
The stations data frame hasn't been updated in over 4 weeks. Consider running `stations_dl()` to check for updates and make sure you have the most recent stations list available
# A tibble: 8 × 16
  prov  station…¹ stati…² clima…³ WMO_id TC_id   lat    lon   elev tz    inter…⁴
  <chr> <chr>       <dbl> <chr>    <dbl> <chr> <dbl>  <dbl>  <dbl> <chr> <chr>  
1 BC    QUATSINO      271 1036570     NA <NA>   50.5 -128.  3.42e0 Etc/… day    
2 BC    BARKERVI…     568 1090660     NA <NA>   53.1 -122.  1.28e3 Etc/… day    
3 BC    AGASSIZ …     707 1100120     NA <NA>   49.2 -122.  1.5 e1 Etc/… day    
4 ON    OTTAWA C…    4333 6105976     NA WCG    45.4  -75.7 7.92e1 Etc/… day    
5 ON    WELLAND      4712 6139445     NA <NA>   43.0  -79.3 1.75e2 Etc/… day    
6 ON    BELLEVIL…    4859 6150689     NA <NA>   44.2  -77.4 7.62e1 Etc/… day    
7 ON    BLOOMFIE…    4862 6150815     NA <NA>   44.0  -77.2 9.14e1 Etc/… day    
8 ON    TORONTO      5051 6158350  71266 <NA>   43.7  -79.4 1.12e2 Etc/… day    
# … with 5 more variables: start <dbl>, end <dbl>, normals <lgl>,
#   normals_1981_2010 <lgl>, normals_1971_2000 <lgl>, and abbreviated variable
#   names ¹​station_name, ²​station_id, ³​climate_id, ⁴​interval
> 
> filepaths <- paste0("app/data/daily_data_", stns_id, ".rds")
> data <- lapply(filepaths, readRDS) |> dplyr::bind_rows()
> str(data)
tibble [421,408 × 37] (S3: tbl_df/tbl/data.frame)
 $ station_name      : chr [1:421408] "QUATSINO" "QUATSINO" "QUATSINO" "QUATSINO" ...
 $ station_id        : num [1:421408] 271 271 271 271 271 271 271 271 271 271 ...
 $ station_operator  : logi [1:421408] NA NA NA NA NA NA ...
 $ prov              : chr [1:421408] "BC" "BC" "BC" "BC" ...
 $ lat               : num [1:421408] 50.5 50.5 50.5 50.5 50.5 ...
 $ lon               : num [1:421408] -128 -128 -128 -128 -128 ...
 $ elev              : num [1:421408] 3.4 3.4 3.4 3.4 3.4 3.4 3.4 3.4 3.4 3.4 ...
 $ climate_id        : chr [1:421408] "1036570" "1036570" "1036570" "1036570" ...
 $ WMO_id            : chr [1:421408] NA NA NA NA ...
 $ TC_id             : chr [1:421408] NA NA NA NA ...
 $ date              : Date[1:421408], format: "1895-01-01" "1895-01-02" ...
 $ year              : chr [1:421408] "1895" "1895" "1895" "1895" ...
 $ month             : chr [1:421408] "01" "01" "01" "01" ...
 $ day               : chr [1:421408] "01" "02" "03" "04" ...
 $ qual              : chr [1:421408] NA NA NA NA ...
 $ cool_deg_days     : num [1:421408] NA NA NA NA NA NA NA NA NA NA ...
 $ cool_deg_days_flag: chr [1:421408] NA NA NA NA ...
 $ dir_max_gust      : num [1:421408] NA NA NA NA NA NA NA NA NA NA ...
 $ dir_max_gust_flag : chr [1:421408] NA NA NA NA ...
 $ heat_deg_days     : num [1:421408] NA NA NA NA NA NA NA NA NA NA ...
 $ heat_deg_days_flag: chr [1:421408] NA NA NA NA ...
 $ max_temp          : num [1:421408] NA NA NA NA NA NA NA NA NA NA ...
 $ max_temp_flag     : chr [1:421408] NA NA NA NA ...
 $ mean_temp         : num [1:421408] NA NA NA NA NA NA NA NA NA NA ...
 $ mean_temp_flag    : chr [1:421408] NA NA NA NA ...
 $ min_temp          : num [1:421408] NA NA NA NA NA NA NA NA NA NA ...
 $ min_temp_flag     : chr [1:421408] NA NA NA NA ...
 $ snow_grnd         : num [1:421408] NA NA NA NA NA NA NA NA NA NA ...
 $ snow_grnd_flag    : chr [1:421408] NA NA NA NA ...
 $ spd_max_gust      : num [1:421408] NA NA NA NA NA NA NA NA NA NA ...
 $ spd_max_gust_flag : chr [1:421408] NA NA NA NA ...
 $ total_precip      : num [1:421408] NA NA NA NA NA NA NA NA NA NA ...
 $ total_precip_flag : chr [1:421408] NA NA NA NA ...
 $ total_rain        : num [1:421408] NA NA NA NA NA NA NA NA NA NA ...
 $ total_rain_flag   : chr [1:421408] NA NA NA NA ...
 $ total_snow        : num [1:421408] NA NA NA NA NA NA NA NA NA NA ...
 $ total_snow_flag   : chr [1:421408] NA NA NA NA ...
> 
> # time variables setup
> data <- data %>% mutate(date = as.Date(date),
+                         year = as.integer(year),
+                         month = as.integer(month),
+                         day = as.integer(day))
> 
> data <- data %>% mutate(time = as.integer(date),
+                         yday = lubridate::yday(date),
+                         week = lubridate::week(date))
> 
> # stations we look at
> stns_id <- c(568, 4333, 5051)
> p <- length(stns_id)
> data <- data %>%
+   filter(station_id %in% stns_id) %>%
+   arrange(station_id, date)
> 
> # quick look at summary of the data (clearly shows time trends)
> data0 <- data %>%
+   # filter(month == 6) %>%
+   group_by(station_name, year) %>%
+   summarise(mm_temp = mean(mean_temp, na.rm=T))
`summarise()` has grouped output by 'station_name'. You can override using the
`.groups` argument.
> ggplot(data0, aes(x=year, y=mm_temp)) +
+   geom_line() +
+   geom_point() +
+   facet_grid(rows = "station_name")
Warning messages:
1: Removed 20 row(s) containing missing values (geom_path). 
2: Removed 25 rows containing missing values (geom_point). 
> 
> data0 <- data %>% group_by(station_name, year, month) %>%
+   summarise(mm_temp = mean(mean_temp, na.rm=T))
`summarise()` has grouped output by 'station_name', 'year'. You can override
using the `.groups` argument.
> ggplot(data0, aes(x=year+month/12, y=mm_temp)) +
+   geom_line() +
+   geom_point() +
+   facet_grid(rows = "station_name")
Warning messages:
1: Removed 242 row(s) containing missing values (geom_path). 
2: Removed 388 rows containing missing values (geom_point). 
> 
> 
> # Estimate mean conditional on time of year -------------------------------
> year_len <- 365 + 6/24 + 9/60/24 + 9/60^2/24
> 
> # create sines-cosines basis (for seasonal trend)
> nSC <- 12
> s_cols <- paste0("s", 1:nSC)
> c_cols <- paste0("c", 1:nSC)
> for (i in 1:nSC) data <- data %>%
+   mutate(!!s_cols[i] := sin(i*2*pi*time/year_len),
+          !!c_cols[i] := cos(i*2*pi*time/year_len))
> 
> 
> # create natural spline basis (for long term time trend)
> # for this check range for each station
> # row_ids <- sapply(stns_id, \(id) data$station_id == id)
> # bss <- lapply(1:p, \(k){
> #   data[row_ids[,k],] %>% filter(day == 21, month %in% c(6,12)) %>% select(time) %>% unlist
> # })
> # 
> # for(b in paste("b", 1:max(sapply(bss, length)))) data <- data %>% mutate(!!b := NA)
> # nB <- rep(0, p); b_cols <- list()
> # for(k in 1:p){
> #   B <- splines::bs(data[row_ids[,k],]$time, knots = c(bss[[k]]))
> #   B <- B[,colSums(abs(B[!is.na(data[row_ids[,k],]$mean_temp),])) > 1e-5]
> #   nB[k] <- ncol(B)
> #   b_cols[[length(b_cols)+1]] <- paste0("b", 1:nB[k])
> #   data[row_ids[,k],b_cols[[k]]] <- B
> #   rm(B)
> # }
> row_ids <- sapply(stns_id, \(id) data$station_id == id)
> bss <- lapply(1:p, \(k){
+   data[row_ids[,k],] %>% filter(day == 1, month == 1, year %in% seq(1850,2000,50)) %>% select(time) %>% unlist
+ })
> 
> for(b in paste("b", 1:max(sapply(bss, length)))) data <- data %>% mutate(!!b := NA)
> nB <- rep(0, p); b_cols <- list()
> for(k in 1:p){
+   B <- splines::bs(data[row_ids[,k],]$time, knots = c(bss[[k]]), degree = 2)
+   B <- B[,colSums(abs(B[!is.na(data[row_ids[,k],]$mean_temp),])) > 1e-5]
+   nB[k] <- ncol(B)
+   b_cols[[length(b_cols)+1]] <- paste0("b", 1:nB[k])
+   data[row_ids[,k],b_cols[[k]]] <- B
+   rm(B)
+ }
> 
> 
> # fit least-squares
> non_na <- !is.na(data$mean_temp) # for later
> sc_cols2 <- paste0(c(s_cols, c_cols), collapse = "+")
> lms <- lapply(1:p, \(k){
+   b_cols2 <- paste0(b_cols[[k]], collapse = "+")
+   ff <- paste0("mean_temp ~ ", sc_cols2, " + (", sc_cols2, "):(",b_cols2 , ")")
+   lm(formula = as.formula(ff), data = data[non_na & row_ids[,k],])
+ })
> 
> # Barkerville
> summary(lms[[1]])

Call:
lm(formula = as.formula(ff), data = data[non_na & row_ids[, k], 
    ])

Residuals:
     Min       1Q   Median       3Q      Max 
-30.9808  -2.4935   0.2566   3.0613  15.9135 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept)  1.805e+00  2.269e-02  79.526  < 2e-16 ***
s1          -3.823e+00  2.521e-01 -15.166  < 2e-16 ***
s2           3.182e-01  2.560e-01   1.243 0.213894    
s3           3.382e-01  2.573e-01   1.314 0.188686    
s4          -3.582e-03  2.605e-01  -0.014 0.989028    
s5          -8.930e-02  2.593e-01  -0.344 0.730534    
s6           6.142e-01  2.571e-01   2.389 0.016907 *  
s7           6.781e-01  2.582e-01   2.626 0.008644 ** 
s8          -3.016e-02  2.565e-01  -0.118 0.906399    
s9          -7.587e-01  2.586e-01  -2.934 0.003349 ** 
s10          5.121e-01  2.580e-01   1.985 0.047190 *  
s11          7.315e-01  2.570e-01   2.847 0.004420 ** 
s12          3.344e-01  2.567e-01   1.303 0.192555    
c1          -1.004e+01  2.625e-01 -38.247  < 2e-16 ***
c2          -6.343e-01  2.598e-01  -2.442 0.014626 *  
c3           2.711e-01  2.588e-01   1.047 0.294892    
c4          -2.923e-01  2.556e-01  -1.144 0.252797    
c5           6.296e-01  2.566e-01   2.453 0.014153 *  
c6          -9.928e-01  2.585e-01  -3.840 0.000123 ***
c7          -9.076e-01  2.572e-01  -3.528 0.000419 ***
c8          -3.802e-01  2.588e-01  -1.469 0.141815    
c9           7.118e-01  2.567e-01   2.773 0.005551 ** 
c10         -2.332e-01  2.572e-01  -0.907 0.364409    
c11          3.188e-01  2.578e-01   1.237 0.216186    
c12          4.479e-01  2.566e-01   1.746 0.080879 .  
s1:b1        4.800e-01  3.202e-01   1.499 0.133853    
s1:b2        1.010e+00  2.594e-01   3.894 9.86e-05 ***
s1:b3        7.321e-01  2.856e-01   2.564 0.010358 *  
s1:b4        1.140e+00  2.805e-01   4.063 4.85e-05 ***
s1:b5       -1.242e-01  3.493e-01  -0.356 0.722098    
s2:b1        1.768e-01  3.237e-01   0.546 0.584866    
s2:b2       -5.187e-01  2.632e-01  -1.971 0.048774 *  
s2:b3        7.447e-01  2.891e-01   2.576 0.009995 ** 
s2:b4        6.931e-01  2.846e-01   2.436 0.014863 *  
s2:b5        1.489e+00  3.537e-01   4.210 2.55e-05 ***
s3:b1       -3.342e-01  3.255e-01  -1.027 0.304473    
s3:b2       -8.564e-01  2.640e-01  -3.244 0.001181 ** 
s3:b3        1.764e-01  2.904e-01   0.608 0.543521    
s3:b4       -2.726e-01  2.853e-01  -0.956 0.339283    
s3:b5        8.514e-01  3.548e-01   2.399 0.016425 *  
s4:b1        2.085e-01  3.291e-01   0.634 0.526350    
s4:b2        8.075e-02  2.666e-01   0.303 0.762014    
s4:b3        2.538e-01  2.935e-01   0.865 0.387252    
s4:b4        3.442e-01  2.879e-01   1.195 0.231962    
s4:b5        9.120e-01  3.571e-01   2.554 0.010657 *  
s5:b1        8.580e-02  3.276e-01   0.262 0.793394    
s5:b2       -4.467e-01  2.658e-01  -1.681 0.092858 .  
s5:b3       -8.230e-02  2.923e-01  -0.282 0.778267    
s5:b4        1.442e-01  2.871e-01   0.502 0.615509    
s5:b5        5.793e-01  3.556e-01   1.629 0.103349    
s6:b1       -1.292e+00  3.254e-01  -3.971 7.16e-05 ***
s6:b2       -4.534e-01  2.639e-01  -1.718 0.085776 .  
s6:b3       -1.047e+00  2.902e-01  -3.609 0.000308 ***
s6:b4       -3.370e-01  2.849e-01  -1.183 0.236902    
s6:b5        4.659e-01  3.556e-01   1.310 0.190091    
s7:b1       -1.401e+00  3.267e-01  -4.289 1.80e-05 ***
s7:b2       -1.684e-01  2.648e-01  -0.636 0.524793    
s7:b3       -1.318e+00  2.914e-01  -4.524 6.07e-06 ***
s7:b4       -3.806e-01  2.860e-01  -1.331 0.183322    
s7:b5        3.099e-01  3.547e-01   0.874 0.382284    
s8:b1       -3.337e-01  3.247e-01  -1.028 0.304144    
s8:b2        7.938e-01  2.635e-01   3.013 0.002588 ** 
s8:b3       -5.034e-01  2.897e-01  -1.738 0.082294 .  
s8:b4        5.735e-02  2.847e-01   0.201 0.840345    
s8:b5        1.795e-02  3.547e-01   0.051 0.959641    
s9:b1        8.326e-01  3.269e-01   2.547 0.010873 *  
s9:b2        6.997e-01  2.652e-01   2.638 0.008335 ** 
s9:b3        9.093e-01  2.917e-01   3.118 0.001823 ** 
s9:b4        3.335e-01  2.865e-01   1.164 0.244308    
s9:b5        1.176e+00  3.562e-01   3.302 0.000959 ***
s10:b1      -5.529e-01  3.266e-01  -1.693 0.090453 .  
s10:b2      -5.673e-01  2.646e-01  -2.144 0.032011 *  
s10:b3      -2.255e-01  2.911e-01  -0.775 0.438552    
s10:b4      -7.251e-01  2.858e-01  -2.537 0.011191 *  
s10:b5       8.268e-03  3.558e-01   0.023 0.981460    
s11:b1      -9.098e-01  3.254e-01  -2.796 0.005176 ** 
s11:b2      -5.958e-01  2.637e-01  -2.260 0.023851 *  
s11:b3      -6.847e-01  2.901e-01  -2.360 0.018269 *  
s11:b4      -6.629e-01  2.849e-01  -2.327 0.019985 *  
s11:b5      -3.302e-01  3.539e-01  -0.933 0.350803    
s12:b1      -6.179e-01  3.249e-01  -1.902 0.057240 .  
s12:b2      -2.899e-01  2.635e-01  -1.100 0.271240    
s12:b3      -2.056e-01  2.898e-01  -0.709 0.478088    
s12:b4      -4.217e-01  2.846e-01  -1.482 0.138323    
s12:b5      -2.237e-01  3.537e-01  -0.632 0.527125    
c1:b1       -1.823e-01  3.311e-01  -0.551 0.581792    
c1:b2        6.507e-04  2.686e-01   0.002 0.998067    
c1:b3       -5.721e-01  2.953e-01  -1.938 0.052671 .  
c1:b4        4.110e-01  2.901e-01   1.417 0.156482    
c1:b5       -1.498e+00  3.599e-01  -4.162 3.16e-05 ***
c2:b1        3.334e-01  3.288e-01   1.014 0.310651    
c2:b2        4.839e-01  2.658e-01   1.820 0.068726 .  
c2:b3       -1.189e-01  2.929e-01  -0.406 0.684821    
c2:b4        7.017e-01  2.870e-01   2.445 0.014503 *  
c2:b5        8.302e-01  3.571e-01   2.325 0.020071 *  
c3:b1       -1.899e-01  3.274e-01  -0.580 0.561871    
c3:b2       -2.422e-01  2.653e-01  -0.913 0.361117    
c3:b3       -6.315e-01  2.919e-01  -2.164 0.030501 *  
c3:b4       -7.320e-02  2.865e-01  -0.255 0.798361    
c3:b5        2.311e-02  3.567e-01   0.065 0.948337    
c4:b1        2.539e-01  3.236e-01   0.785 0.432689    
c4:b2        1.470e-01  2.627e-01   0.560 0.575732    
c4:b3       -6.337e-03  2.887e-01  -0.022 0.982489    
c4:b4        3.534e-01  2.839e-01   1.245 0.213207    
c4:b5        7.470e-01  3.546e-01   2.107 0.035139 *  
c5:b1       -6.035e-02  3.250e-01  -0.186 0.852688    
c5:b2       -7.641e-01  2.634e-01  -2.901 0.003717 ** 
c5:b3       -4.288e-01  2.898e-01  -1.479 0.139019    
c5:b4       -6.114e-01  2.846e-01  -2.148 0.031705 *  
c5:b5       -4.764e-01  3.558e-01  -1.339 0.180688    
c6:b1        1.466e+00  3.270e-01   4.484 7.34e-06 ***
c6:b2        9.098e-01  2.651e-01   3.432 0.000599 ***
c6:b3        7.091e-01  2.916e-01   2.431 0.015041 *  
c6:b4        6.792e-01  2.865e-01   2.370 0.017779 *  
c6:b5        6.055e-01  3.557e-01   1.702 0.088748 .  
c7:b1        8.420e-01  3.254e-01   2.587 0.009672 ** 
c7:b2        8.923e-01  2.641e-01   3.379 0.000728 ***
c7:b3        9.278e-01  2.903e-01   3.196 0.001397 ** 
c7:b4        1.012e+00  2.853e-01   3.547 0.000390 ***
c7:b5       -2.863e-01  3.564e-01  -0.803 0.421858    
c8:b1        1.266e-01  3.273e-01   0.387 0.698810    
c8:b2        5.040e-01  2.652e-01   1.900 0.057404 .  
c8:b3        2.230e-01  2.919e-01   0.764 0.444796    
c8:b4        2.706e-01  2.865e-01   0.945 0.344821    
c8:b5        4.215e-01  3.563e-01   1.183 0.236864    
c9:b1       -1.799e+00  3.250e-01  -5.534 3.15e-08 ***
c9:b2        1.754e-01  2.635e-01   0.666 0.505455    
c9:b3       -1.088e+00  2.898e-01  -3.754 0.000174 ***
c9:b4       -6.073e-01  2.846e-01  -2.134 0.032877 *  
c9:b5       -7.925e-01  3.547e-01  -2.234 0.025466 *  
c10:b1      -4.664e-01  3.253e-01  -1.434 0.151666    
c10:b2       9.793e-01  2.640e-01   3.710 0.000207 ***
c10:b3      -1.934e-02  2.903e-01  -0.067 0.946888    
c10:b4       2.597e-01  2.852e-01   0.911 0.362528    
c10:b5       6.426e-01  3.548e-01   1.811 0.070108 .  
c11:b1      -8.153e-01  3.260e-01  -2.500 0.012408 *  
c11:b2       3.661e-01  2.645e-01   1.384 0.166322    
c11:b3      -7.521e-01  2.909e-01  -2.586 0.009723 ** 
c11:b4      -2.281e-01  2.857e-01  -0.798 0.424621    
c11:b5      -6.898e-01  3.557e-01  -1.939 0.052513 .  
c12:b1      -6.940e-01  3.249e-01  -2.136 0.032705 *  
c12:b2      -3.616e-01  2.634e-01  -1.373 0.169780    
c12:b3      -7.146e-01  2.897e-01  -2.466 0.013660 *  
c12:b4      -5.994e-01  2.847e-01  -2.105 0.035254 *  
c12:b5      -2.984e-01  3.536e-01  -0.844 0.398784    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 4.803 on 44774 degrees of freedom
Multiple R-squared:  0.7143,	Adjusted R-squared:  0.7134 
F-statistic: 777.3 on 144 and 44774 DF,  p-value: < 2.2e-16

> # Ottawa
> summary(lms[[2]])

Call:
lm(formula = as.formula(ff), data = data[non_na & row_ids[, k], 
    ])

Residuals:
     Min       1Q   Median       3Q      Max 
-26.1114  -3.0832  -0.0352   3.1441  18.8347 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept)   6.048223   0.021996 274.965  < 2e-16 ***
s1           -6.263506   0.326999 -19.155  < 2e-16 ***
s2           -0.683348   0.318915  -2.143 0.032140 *  
s3            0.062779   0.321656   0.195 0.845256    
s4           -0.321236   0.323203  -0.994 0.320269    
s5            0.340946   0.320340   1.064 0.287187    
s6           -0.615725   0.321405  -1.916 0.055406 .  
s7            0.495453   0.322496   1.536 0.124469    
s8           -1.193586   0.321050  -3.718 0.000201 ***
s9           -0.511452   0.321728  -1.590 0.111908    
s10          -0.961105   0.321981  -2.985 0.002837 ** 
s11          -0.554959   0.320322  -1.733 0.083190 .  
s12           0.319132   0.319874   0.998 0.318439    
c1          -14.508301   0.313916 -46.217  < 2e-16 ***
c2           -0.251330   0.323986  -0.776 0.437904    
c3           -0.426993   0.321579  -1.328 0.184251    
c4            0.332795   0.320105   1.040 0.298511    
c5           -0.574219   0.322970  -1.778 0.075421 .  
c6           -0.688637   0.321933  -2.139 0.032435 *  
c7            0.800809   0.320799   2.496 0.012553 *  
c8            0.074083   0.322139   0.230 0.818113    
c9           -0.075703   0.321324  -0.236 0.813747    
c10           0.323288   0.320833   1.008 0.313626    
c11           0.279620   0.321908   0.869 0.385052    
c12          -0.292805   0.319873  -0.915 0.359997    
s1:b1         1.033136   0.398448   2.593 0.009520 ** 
s1:b2         0.336949   0.325194   1.036 0.300138    
s1:b3         1.235390   0.356801   3.462 0.000536 ***
s1:b4         1.203702   0.345049   3.488 0.000486 ***
s1:b5         0.918768   0.380439   2.415 0.015738 *  
s2:b1        -0.699566   0.390314  -1.792 0.073089 .  
s2:b2        -0.264335   0.317934  -0.831 0.405744    
s2:b3        -0.383067   0.348998  -1.098 0.272375    
s2:b4        -0.241265   0.337644  -0.715 0.474887    
s2:b5        -0.230566   0.372916  -0.618 0.536395    
s3:b1        -0.022311   0.392797  -0.057 0.954704    
s3:b2        -0.487079   0.320454  -1.520 0.128526    
s3:b3        -0.470965   0.351609  -1.339 0.180429    
s3:b4        -0.625947   0.340183  -1.840 0.065770 .  
s3:b5        -0.076176   0.375555  -0.203 0.839263    
s4:b1         0.833493   0.394263   2.114 0.034516 *  
s4:b2         0.354197   0.321859   1.100 0.271132    
s4:b3         0.685837   0.353093   1.942 0.052098 .  
s4:b4         0.116763   0.341606   0.342 0.732498    
s4:b5         0.439227   0.376820   1.166 0.243777    
s5:b1        -0.412224   0.391470  -1.053 0.292339    
s5:b2         0.033678   0.319267   0.105 0.915990    
s5:b3        -0.185108   0.350342  -0.528 0.597250    
s5:b4        -0.309212   0.338989  -0.912 0.361689    
s5:b5        -0.288435   0.374758  -0.770 0.441506    
s6:b1         0.680474   0.392573   1.733 0.083036 .  
s6:b2         0.960362   0.320213   2.999 0.002709 ** 
s6:b3         0.564432   0.351374   1.606 0.108203    
s6:b4         0.687353   0.339950   2.022 0.043190 *  
s6:b5         0.704098   0.375575   1.875 0.060837 .  
s7:b1        -0.380106   0.393721  -0.965 0.334339    
s7:b2        -0.198776   0.321186  -0.619 0.535999    
s7:b3        -0.609948   0.352428  -1.731 0.083511 .  
s7:b4        -0.357918   0.340938  -1.050 0.293815    
s7:b5        -0.703319   0.376209  -1.869 0.061561 .  
s8:b1         1.283954   0.392267   3.273 0.001064 ** 
s8:b2         1.386760   0.319892   4.335 1.46e-05 ***
s8:b3         1.450019   0.351029   4.131 3.62e-05 ***
s8:b4         0.958070   0.339606   2.821 0.004788 ** 
s8:b5         1.662168   0.374748   4.435 9.21e-06 ***
s9:b1         0.421214   0.392869   1.072 0.283659    
s9:b2         0.710727   0.320516   2.217 0.026597 *  
s9:b3         0.443319   0.351670   1.261 0.207455    
s9:b4         0.667667   0.340227   1.962 0.049720 *  
s9:b5         0.259654   0.375345   0.692 0.489081    
s10:b1        0.897276   0.393088   2.283 0.022456 *  
s10:b2        1.251904   0.320749   3.903 9.51e-05 ***
s10:b3        0.723145   0.351910   2.055 0.039892 *  
s10:b4        1.083641   0.340456   3.183 0.001459 ** 
s10:b5        0.990413   0.375590   2.637 0.008368 ** 
s11:b1        0.242409   0.391445   0.619 0.535743    
s11:b2        0.566871   0.319249   1.776 0.075799 .  
s11:b3        0.563418   0.350312   1.608 0.107769    
s11:b4        0.358777   0.338934   1.059 0.289812    
s11:b5        1.198412   0.373927   3.205 0.001352 ** 
s12:b1       -0.914432   0.390954  -2.339 0.019341 *  
s12:b2        0.066374   0.318858   0.208 0.835104    
s12:b3       -0.788962   0.349873  -2.255 0.024138 *  
s12:b4       -0.378559   0.338525  -1.118 0.263461    
s12:b5       -0.144656   0.373527  -0.387 0.698557    
c1:b1        -1.157830   0.384710  -3.010 0.002617 ** 
c1:b2        -0.599008   0.313576  -1.910 0.056107 .  
c1:b3        -0.306006   0.344098  -0.889 0.373846    
c1:b4         0.016752   0.333104   0.050 0.959892    
c1:b5         0.301516   0.368158   0.819 0.412799    
c2:b1        -0.741791   0.394926  -1.878 0.060346 .  
c2:b2        -0.380308   0.322584  -1.179 0.238427    
c2:b3        -0.779403   0.353821  -2.203 0.027612 *  
c2:b4        -0.298351   0.342309  -0.872 0.383439    
c2:b5         0.056738   0.377413   0.150 0.880501    
c3:b1         0.639551   0.392768   1.628 0.103464    
c3:b2         0.532987   0.320368   1.664 0.096185 .  
c3:b3        -0.124099   0.351530  -0.353 0.724072    
c3:b4         0.695865   0.340071   2.046 0.040739 *  
c3:b5         0.542080   0.375036   1.445 0.148350    
c4:b1        -0.388653   0.391396  -0.993 0.320720    
c4:b2        -0.005815   0.319021  -0.018 0.985458    
c4:b3        -0.944189   0.350120  -2.697 0.007004 ** 
c4:b4        -0.193286   0.338715  -0.571 0.568243    
c4:b5         0.014561   0.373850   0.039 0.968931    
c5:b1         0.449557   0.394179   1.140 0.254088    
c5:b2         0.819093   0.321621   2.547 0.010876 *  
c5:b3         0.337854   0.352871   0.957 0.338348    
c5:b4         0.297424   0.341337   0.871 0.383567    
c5:b5         1.097396   0.375949   2.919 0.003513 ** 
c6:b1         1.220824   0.393112   3.106 0.001900 ** 
c6:b2         0.746084   0.320695   2.326 0.019998 *  
c6:b3         0.916762   0.351867   2.605 0.009179 ** 
c6:b4         0.666497   0.340398   1.958 0.050237 .  
c6:b5         1.036278   0.375146   2.762 0.005741 ** 
c7:b1        -0.794249   0.391914  -2.027 0.042710 *  
c7:b2        -0.576364   0.319685  -1.803 0.071408 .  
c7:b3        -0.850703   0.350770  -2.425 0.015302 *  
c7:b4        -0.542403   0.339371  -1.598 0.109991    
c7:b5        -1.010823   0.374475  -2.699 0.006951 ** 
c8:b1        -0.266681   0.393253  -0.678 0.497685    
c8:b2         0.236220   0.320886   0.736 0.461644    
c8:b3        -0.402377   0.352065  -1.143 0.253084    
c8:b4         0.240143   0.340606   0.705 0.480785    
c8:b5         0.070985   0.375833   0.189 0.850193    
c9:b1        -0.044904   0.392508  -0.114 0.908918    
c9:b2         0.385971   0.320139   1.206 0.227964    
c9:b3        -0.151802   0.351291  -0.432 0.665652    
c9:b4         0.505111   0.339858   1.486 0.137222    
c9:b5        -0.451441   0.375075  -1.204 0.228749    
c10:b1       -0.390137   0.392028  -0.995 0.319655    
c10:b2       -0.143177   0.319699  -0.448 0.654264    
c10:b3       -0.523105   0.350818  -1.491 0.135941    
c10:b4       -0.119210   0.339410  -0.351 0.725420    
c10:b5       -0.177341   0.374544  -0.473 0.635868    
c11:b1       -0.232809   0.393065  -0.592 0.553659    
c11:b2       -0.494253   0.320676  -1.541 0.123254    
c11:b3       -0.283292   0.351849  -0.805 0.420736    
c11:b4       -0.297754   0.340398  -0.875 0.381729    
c11:b5        0.027118   0.375661   0.072 0.942454    
c12:b1        0.294504   0.390942   0.753 0.451262    
c12:b2        0.325353   0.318865   1.020 0.307569    
c12:b3        0.328860   0.349873   0.940 0.347252    
c12:b4        0.424692   0.338537   1.254 0.209669    
c12:b5        0.225462   0.373824   0.603 0.546428    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 4.852 on 48531 degrees of freedom
Multiple R-squared:  0.8441,	Adjusted R-squared:  0.8437 
F-statistic:  1825 on 144 and 48531 DF,  p-value: < 2.2e-16

> # Toronto
> summary(lms[[3]])

Call:
lm(formula = as.formula(ff), data = data[non_na & row_ids[, k], 
    ])

Residuals:
     Min       1Q   Median       3Q      Max 
-21.8146  -2.8287  -0.0125   2.9047  18.1067 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept)   8.038920   0.017786 451.986  < 2e-16 ***
s1           -4.239996   0.248829 -17.040  < 2e-16 ***
s2            0.812819   0.255676   3.179 0.001478 ** 
s3            0.372023   0.253138   1.470 0.141663    
s4            0.129596   0.252638   0.513 0.607973    
s5            0.517913   0.254211   2.037 0.041621 *  
s6            0.417560   0.253494   1.647 0.099519 .  
s7           -0.086135   0.252981  -0.340 0.733495    
s8            0.437256   0.253787   1.723 0.084907 .  
s9           -0.826445   0.253269  -3.263 0.001103 ** 
s10          -0.567155   0.253315  -2.239 0.025164 *  
s11           0.500784   0.252692   1.982 0.047507 *  
s12          -0.229182   0.252713  -0.907 0.364471    
c1          -11.541255   0.256272 -45.035  < 2e-16 ***
c2            0.070482   0.250912   0.281 0.778786    
c3            0.990159   0.253742   3.902 9.54e-05 ***
c4            0.041311   0.254314   0.162 0.870961    
c5           -0.392199   0.252750  -1.552 0.120733    
c6            0.410861   0.253454   1.621 0.105013    
c7           -0.148115   0.253918  -0.583 0.559682    
c8           -0.477742   0.253052  -1.888 0.059042 .  
c9           -0.534806   0.253464  -2.110 0.034864 *  
c10          -0.752690   0.253232  -2.972 0.002957 ** 
c11          -0.679533   0.253394  -2.682 0.007326 ** 
c12          -0.073354   0.251433  -0.292 0.770484    
s1:b1        -0.880043   0.306685  -2.870 0.004112 ** 
s1:b2        -1.505474   0.253585  -5.937 2.92e-09 ***
s1:b3        -0.805926   0.270104  -2.984 0.002848 ** 
s1:b4        -1.079284   0.266347  -4.052 5.08e-05 ***
s1:b5         0.218722   0.314062   0.696 0.486163    
s1:b6       -80.911693  20.169658  -4.012 6.04e-05 ***
s2:b1        -0.373256   0.313964  -1.189 0.234503    
s2:b2        -1.099672   0.259505  -4.238 2.26e-05 ***
s2:b3        -0.951420   0.276767  -3.438 0.000587 ***
s2:b4        -1.121470   0.272550  -4.115 3.88e-05 ***
s2:b5        -0.827597   0.319895  -2.587 0.009681 ** 
s2:b6        33.669508  21.091717   1.596 0.110419    
s3:b1        -1.039894   0.311301  -3.340 0.000837 ***
s3:b2        -0.205781   0.257291  -0.800 0.423830    
s3:b3        -0.740644   0.274305  -2.700 0.006934 ** 
s3:b4        -0.636082   0.270252  -2.354 0.018592 *  
s3:b5        -0.883866   0.317833  -2.781 0.005422 ** 
s3:b6        -5.472628  21.280897  -0.257 0.797055    
s4:b1         0.004908   0.310735   0.016 0.987399    
s4:b2         0.017406   0.256875   0.068 0.945978    
s4:b3        -0.014939   0.273812  -0.055 0.956491    
s4:b4        -0.051712   0.269805  -0.192 0.848006    
s4:b5        -0.286891   0.317429  -0.904 0.366108    
s4:b6       -26.358174  21.346195  -1.235 0.216912    
s5:b1        -0.137835   0.312422  -0.441 0.659083    
s5:b2        -0.710467   0.258229  -2.751 0.005938 ** 
s5:b3        -0.102651   0.275345  -0.373 0.709292    
s5:b4        -0.499803   0.271226  -1.843 0.065369 .  
s5:b5        -0.415536   0.318735  -1.304 0.192339    
s5:b6        -8.774012  21.373095  -0.411 0.681428    
s6:b1         0.087495   0.311668   0.281 0.778919    
s6:b2        -0.714716   0.257604  -2.774 0.005531 ** 
s6:b3         0.014394   0.274649   0.052 0.958203    
s6:b4        -0.605590   0.270576  -2.238 0.025215 *  
s6:b5        -0.312337   0.318144  -0.982 0.326229    
s6:b6         7.403045  21.382945   0.346 0.729184    
s7:b1         0.131365   0.311098   0.422 0.672836    
s7:b2         0.050622   0.257171   0.197 0.843952    
s7:b3         0.295982   0.274145   1.080 0.280300    
s7:b4        -0.081448   0.270115  -0.302 0.763011    
s7:b5         0.021343   0.317718   0.067 0.946441    
s7:b6        36.327631  21.382075   1.699 0.089329 .  
s8:b1        -0.276531   0.311980  -0.886 0.375419    
s8:b2        -0.456811   0.257858  -1.772 0.076473 .  
s8:b3        -0.389235   0.274934  -1.416 0.156857    
s8:b4        -0.147949   0.270841  -0.546 0.584892    
s8:b5        -0.639984   0.318384  -2.010 0.044425 *  
s8:b6       -59.685504  21.371166  -2.793 0.005227 ** 
s9:b1         1.124009   0.311424   3.609 0.000307 ***
s9:b2         0.574836   0.257412   2.233 0.025544 *  
s9:b3         1.057572   0.274429   3.854 0.000116 ***
s9:b4         0.581173   0.270373   2.150 0.031597 *  
s9:b5         1.621195   0.317950   5.099 3.43e-07 ***
s9:b6       -67.353705  21.346190  -3.155 0.001604 ** 
s10:b1        0.510941   0.311452   1.641 0.100904    
s10:b2        0.210180   0.257461   0.816 0.414299    
s10:b3        0.892643   0.274469   3.252 0.001146 ** 
s10:b4        0.260721   0.270416   0.964 0.334976    
s10:b5        1.091954   0.317975   3.434 0.000595 ***
s10:b6      -54.112398  21.293519  -2.541 0.011048 *  
s11:b1       -0.521700   0.310828  -1.678 0.093270 .  
s11:b2       -0.473816   0.256905  -1.844 0.065142 .  
s11:b3       -0.676045   0.273871  -2.468 0.013572 *  
s11:b4       -0.321233   0.269846  -1.190 0.233882    
s11:b5       -1.019164   0.317438  -3.211 0.001325 ** 
s11:b6       44.354474  21.163381   2.096 0.036103 *  
s12:b1        0.527434   0.310822   1.697 0.089721 .  
s12:b2        0.136990   0.256936   0.533 0.593919    
s12:b3        0.286685   0.273883   1.047 0.295223    
s12:b4        0.077516   0.269860   0.287 0.773924    
s12:b5       -0.176649   0.317333  -0.557 0.577756    
s12:b6       46.247811  20.633611   2.241 0.025005 *  
c1:b1         0.120214   0.314639   0.382 0.702411    
c1:b2        -1.079421   0.260004  -4.152 3.31e-05 ***
c1:b3        -0.608501   0.277356  -2.194 0.028244 *  
c1:b4        -1.064546   0.273090  -3.898 9.70e-05 ***
c1:b5        -0.151089   0.320453  -0.471 0.637297    
c1:b6       -47.578308  21.552867  -2.208 0.027282 *  
c2:b1         0.224510   0.308933   0.727 0.467395    
c2:b2         0.059436   0.255368   0.233 0.815960    
c2:b3        -0.014676   0.272141  -0.054 0.956992    
c2:b4        -0.447624   0.268243  -1.669 0.095177 .  
c2:b5         0.224377   0.316033   0.710 0.477721    
c2:b6        -5.689198  21.504595  -0.265 0.791351    
c3:b1        -1.009524   0.311902  -3.237 0.001210 ** 
c3:b2        -0.728126   0.257834  -2.824 0.004744 ** 
c3:b3        -0.740270   0.274885  -2.693 0.007083 ** 
c3:b4        -1.268606   0.270806  -4.685 2.81e-06 ***
c3:b5        -0.736367   0.318362  -2.313 0.020727 *  
c3:b6        46.728485  21.480980   2.175 0.029608 *  
c4:b1        -0.189729   0.312545  -0.607 0.543822    
c4:b2        -0.031383   0.258312  -0.121 0.903302    
c4:b3         0.365793   0.275449   1.328 0.184186    
c4:b4        -0.361137   0.271319  -1.331 0.183180    
c4:b5        -0.179598   0.318837  -0.563 0.573239    
c4:b6        60.149603  21.466480   2.802 0.005080 ** 
c5:b1         0.188188   0.310867   0.605 0.544939    
c5:b2         0.080611   0.256966   0.314 0.753747    
c5:b3         0.528456   0.273924   1.929 0.053710 .  
c5:b4         0.251685   0.269906   0.932 0.351086    
c5:b5         0.054764   0.317541   0.172 0.863074    
c5:b6       -19.412584  21.452973  -0.905 0.365527    
c6:b1        -0.389150   0.311607  -1.249 0.211725    
c6:b2        -0.106275   0.257579  -0.413 0.679908    
c6:b3        -0.318708   0.274607  -1.161 0.245812    
c6:b4        -0.147721   0.270544  -0.546 0.585058    
c6:b5        -0.490752   0.318119  -1.543 0.122917    
c6:b6         6.103978  21.437163   0.285 0.775846    
c7:b1         0.023174   0.312125   0.074 0.940816    
c7:b2         0.361896   0.257969   1.403 0.160663    
c7:b3         0.106928   0.275063   0.389 0.697470    
c7:b4         0.436478   0.270960   1.611 0.107216    
c7:b5        -0.372041   0.318501  -1.168 0.242770    
c7:b6        49.174176  21.416408   2.296 0.021674 *  
c8:b1         0.656801   0.311180   2.111 0.034804 *  
c8:b2         0.475490   0.257231   1.848 0.064536 .  
c8:b3         0.447766   0.274216   1.633 0.102496    
c8:b4         0.454179   0.270179   1.681 0.092763 .  
c8:b5         0.144428   0.317777   0.454 0.649475    
c8:b6        44.976259  21.386997   2.103 0.035472 *  
c9:b1         0.585010   0.311623   1.877 0.060482 .  
c9:b2         0.174181   0.257585   0.676 0.498912    
c9:b3         0.787752   0.274618   2.869 0.004125 ** 
c9:b4         0.527255   0.270551   1.949 0.051321 .  
c9:b5         0.588494   0.318109   1.850 0.064322 .  
c9:b6        18.077541  21.341829   0.847 0.396972    
c10:b1        0.825347   0.311397   2.650 0.008040 ** 
c10:b2        0.788990   0.257374   3.066 0.002174 ** 
c10:b3        0.817458   0.274396   2.979 0.002892 ** 
c10:b4        0.799095   0.270336   2.956 0.003119 ** 
c10:b5        0.346687   0.317903   1.091 0.275478    
c10:b6       60.755785  21.263717   2.857 0.004275 ** 
c11:b1        0.685347   0.311535   2.200 0.027817 *  
c11:b2        0.674839   0.257530   2.620 0.008784 ** 
c11:b3        0.468849   0.274545   1.708 0.087692 .  
c11:b4        0.723587   0.270485   2.675 0.007472 ** 
c11:b5        0.602067   0.317999   1.893 0.058323 .  
c11:b6      -42.830136  21.096647  -2.030 0.042342 *  
c12:b1        0.244771   0.309484   0.791 0.429005    
c12:b2       -0.066123   0.255818  -0.258 0.796040    
c12:b3        0.147800   0.272642   0.542 0.587748    
c12:b4        0.055823   0.268697   0.208 0.835421    
c12:b5        0.248805   0.316250   0.787 0.431440    
c12:b6      -24.432874  20.505188  -1.192 0.233444    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 4.342 on 59482 degrees of freedom
Multiple R-squared:  0.8249,	Adjusted R-squared:  0.8244 
F-statistic:  1668 on 168 and 59482 DF,  p-value: < 2.2e-16

> 
> # register the results
> data <- data %>% mutate(mu = NA , ctemp = NA)
> for(k in 1:p){
+   data[non_na & row_ids[,k],] <- data[non_na & row_ids[,k],] %>% 
+     mutate(mu = lms[[k]]$fitted.values, ctemp = mean_temp - mu)
+ }
> 
> # remove b cols of data (for memory)
> data <- data %>%
+   select(!any_of(b_cols[[which.max(sapply(b_cols, length))]])) %>%
+   select(!any_of(c(s_cols, c_cols)))
> gc()
           used  (Mb) gc trigger  (Mb) max used  (Mb)
Ncells  2504125 133.8    4520294 241.5  4520294 241.5
Vcells 40618318 309.9  103713261 791.3 86341765 658.8
> 
> # quick check
> data0 <- data %>% filter(year %in% 1910:1911)
> ggplot(data0, aes(x=date, y=mean_temp, col=station_name, group=station_name)) +
+   geom_line() + geom_point() +
+   geom_line(data = data0, aes(y=mu), col=1) +
+   facet_grid(rows="station_name")
> 
> data0 <- data %>% filter(year %in% 1970:1975, station_name %in% c("OTTAWA CDA", "TORONTO"))
> ggplot(data0, aes(x=date, y=mean_temp, col=station_name, group=station_name)) +
+   geom_line() + geom_point() +
+   geom_line(data = data0, aes(y=mu), lty=2)
> ggplot(data0, aes(x=date, y=ctemp, col=station_name, group=station_name)) +
+   geom_line() + geom_point()
> 
> 
> 
> 
> data0 <- data %>% group_by(year, month, station_name) %>%
+   summarise(m_mt = mean(mean_temp, na.rm=T),
+             m_mu = mean(mu, na.rm=T))
`summarise()` has grouped output by 'year', 'month'. You can override using the
`.groups` argument.
> ggplot(data0, aes(x=year + month/12, y=m_mt, col=station_name, group=station_name)) +
+   theme_light() +
+   geom_line(data = data0, aes(y=m_mu), col=1) +
+   geom_point()
Warning messages:
1: Removed 255 row(s) containing missing values (geom_path). 
2: Removed 388 rows containing missing values (geom_point). 
> 
> data0 <- data %>% filter(year %in% 1975:1980) %>%
+   group_by(year, month, station_name) %>%
+   summarise(m_mt = mean(mean_temp, na.rm=T),
+             m_mu = mean(mu, na.rm=T))
`summarise()` has grouped output by 'year', 'month'. You can override using the
`.groups` argument.
> ggplot(data0, aes(x=year+month/12, y=m_mt, col=station_name, group=station_name)) +
+   geom_line() + geom_point() +
+   geom_line(data = data0, aes(y=m_mu), col=1) +
+   facet_grid(rows="station_name")
Warning message:
Removed 7 rows containing missing values (geom_point). 
> 
> ggplot(data0, aes(x=year+month/12, y=m_mt, col=station_name, group=station_name)) +
+   geom_line() + geom_point() +
+   geom_line(data = data0, aes(y=m_mu), col=1) +
+   facet_grid(rows="station_name")
Warning message:
Removed 7 rows containing missing values (geom_point). 
> 
> data0 <- data %>% filter(month == 6) %>%
+   group_by(year, month, station_name) %>%
+   summarise(m_mt = mean(mean_temp, na.rm=T),
+             m_mu = mean(mu, na.rm=T))
`summarise()` has grouped output by 'year', 'month'. You can override using the
`.groups` argument.
> ggplot(data0, aes(x=year+month/12, y=m_mu, col=station_name, group=station_name)) +
+   geom_line() + geom_point() +
+   facet_grid(rows="station_name")
Warning messages:
1: Removed 21 row(s) containing missing values (geom_path). 
2: Removed 32 rows containing missing values (geom_point). 
> 
> 
> # random check of the fits
> # some plots might show a break (when the data goes from Ottawa to Toronto)
> k <- sample(nrow(data),1)
> ii <- k + 1:365
> plot(data$time[ii], data$mean_temp[ii])
> lines(data$time[ii], data$mu[ii], col=2)
> 
> 
> # note that this breaks the equalities in the data
> # but there is still some heterogeneity in the variance
> N <- 20000 
> par(mfrow=c(p,2), mar=c(1,1,0,0))
> for(k in 1:p){
+   plot(data$yday[row_ids[,k]][1:N], data$mean_temp[row_ids[,k]][1:N], cex=.25)
+   plot(data$yday[row_ids[,k]][1:N], data$ctemp[row_ids[,k]][1:N], cex=.25)
+ }
> 
> 
> 
> # Compute pseudo-observations using ECDF ----------------------------------
> data <- data %>% mutate(pseudo_temp = NA, diff = NA, w1 = NA, w = NA)
> for(k in 1:p){
+   id <- stns_id[k]
+   cat("Working on ECDF for station ", id, ".\n")
+   row_id <- row_ids[,k]
+ 
+   for(tt in 1:366){
+     if(tt %% 20 == 0) cat("progess: ", round(tt/366*100,2), "%\n")
+     
+     # construct weights based on yday using gaussian kernel
+     data[row_id,] <- data[row_id,] %>%
+       mutate(diff = tt - (time %% year_len)) %>%
+       mutate(diff = abs(pmin(diff, year_len - diff))) %>%
+       mutate(w1 = dnorm(diff,0,2)) %>%
+       mutate(w = w1/sum(w1, na.rm = T)) 
+     
+     # construct ecdf function using all the data
+     wecdf <- spatstat.geom::ewcdf(data[row_id,]$ctemp, data[row_id,]$w)
+     
+     # compute ecdf only for yday we care for
+     ind <- which(data[row_id,]$yday == tt & !is.na(data[row_id,]$ctemp))
+     data[row_id,][ind,] <- data[row_id,][ind,] %>%
+       mutate(pseudo_temp = wecdf(ctemp))
+     
+     # heuristic correction for the largest (pseudo_obs = 1)
+     # to avoid modifying all values (say, with pseudo_obs = pseudo_obs*n_ind/(n_ind+1))
+     n_ind <- length(ind)
+     data[row_id,][ind,] <- data[row_id,][ind,] %>%
+       mutate(pseudo_temp = ifelse(pseudo_temp == 1, 1-1/(2*n_ind), pseudo_temp))
+   }
+ }
Working on ECDF for station  568 .
progess:  5.46 %
progess:  10.93 %
progess:  16.39 %
progess:  21.86 %
progess:  27.32 %
progess:  32.79 %
progess:  38.25 %
progess:  43.72 %
progess:  49.18 %
progess:  54.64 %
progess:  60.11 %
progess:  65.57 %
progess:  71.04 %
progess:  76.5 %
progess:  81.97 %
progess:  87.43 %
progess:  92.9 %
progess:  98.36 %
Working on ECDF for station  4333 .
progess:  5.46 %
progess:  10.93 %
progess:  16.39 %
progess:  21.86 %
progess:  27.32 %
progess:  32.79 %
progess:  38.25 %
progess:  43.72 %
progess:  49.18 %
progess:  54.64 %
progess:  60.11 %
progess:  65.57 %
progess:  71.04 %
progess:  76.5 %
progess:  81.97 %
progess:  87.43 %
progess:  92.9 %
progess:  98.36 %
Working on ECDF for station  5051 .
progess:  5.46 %
progess:  10.93 %
progess:  16.39 %
progess:  21.86 %
progess:  27.32 %
progess:  32.79 %
progess:  38.25 %
progess:  43.72 %
progess:  49.18 %
progess:  54.64 %
progess:  60.11 %
progess:  65.57 %
progess:  71.04 %
progess:  76.5 %
progess:  81.97 %
progess:  87.43 %
progess:  92.9 %
progess:  98.36 %
> 
> 
> 
> # resulting histograms are even better than expected
> ggplot(data, aes(x = pseudo_temp, fill=as.factor(yday))) +
+   theme(legend.position = "none") +
+   geom_histogram(breaks=seq(0,1,.05), position = position_stack()) +
+   facet_wrap(~station_name)
Warning message:
Removed 12480 rows containing non-finite values (stat_bin). 
> 
> # quick check of the other operations (tt = 366, last it. of for loop)
> s <- sample(nrow(data) - 1000,1)
> par(mfrow=c(3,1))
> plot(data$pseudo_temp[s + 1:100], type="o") # makes sense
> plot(data$date[s + 1:1000], data$diff[s + 1:1000]) # linear in time, as expected
> plot(data$date[s + 1:1000], data$w[s + 1:1000], type="l") # select only end of year periods
> 
> # note that there are equalities, but very very few of them. can disregard.
> apply(row_ids, 2, \(r){
+   tab <- table(data[r,]$pseudo_temp)
+   tab[tab > 1]
+ })
[[1]]

  0.1919620586201 0.995901639344262 0.995967741935484             0.996 
                2                 2                 2                 3 

[[2]]

0.346736534044344 0.556714978324468 0.848848721978359 0.996240601503759 
                2                 2                 2                 7 
0.996268656716418 
                3 

[[3]]

0.580524970635693 0.604672931528003 0.996932515337423 0.996951219512195 
                2                 2                 8                 4 

> 
> 
> 
> # Save for later use ------------------------------------------------------
> saveRDS(data, "app/data/data_pp9.rds")
> 
> proc.time()
   user  system elapsed 
361.110   2.011 363.178 
