
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # File used to perform the benchmarking the algorithms.
> # ran with
> # R --vanilla --no restore CMD BATCH benchmark-p4-unif/benchmark-p4-unif.R benchmark-p4-unif/log.txt
> 
> # Packages ----------------------------------------------------------------
> library(Rcpp)
> library(data.table)
> library(ggplot2)
> library(parallel)
> library(microbenchmark, lib.loc = "~/R/x86_64-pc-linux-gnu-library/4.3/")
> 
> # functions to benchmark
> library(pcaPP) # cor.fk
> sourceCpp("src/dac_seq.cpp")  # divide-and-conquer alg.
> sourceCpp("src/dac_seq_tune.cpp")  # divide-and-conquer alg.
> source("functions.R")       # wrappers (performs re-ordering if necessary)
> 
> 
> # Benchmark ---------------------------------------------------------------
> num_rep <- 1
> taus <- 0
> n0s <- 5:34 # (n = 2^k)
> p <- c(4) # dimensions considered
> 
> sim_grid <- expand.grid(rep_id = 1:num_rep, n0 = n0s, p=p)
> sim_grid$n <- sim_grid$n0^p
> cat("Number of row in sim_grid: ", nrow(sim_grid), "\n")
Number of row in sim_grid:  30 
> 
> K <- 25
> mclapply(1:nrow(sim_grid), \(s){
+     
+   cat("------------------------- n=", n0s[x], "\n")
+ 
+   rep_id <- sim_grid[s,]$rep_id
+   n0 <- sim_grid[s,]$n0
+ 
+   X <- expand.grid(1:n0,1:n0,1:n0,1:n0) |> as.matrix() #+ (1:n0^4)/(n0^4+1)
+   n <- nrow(X)
+ 
+   gc()
+   time_dac <- summary(microbenchmark(
+     "dac" = taujack_dac_tune(X, thresh=as.integer(2^9), tune=3L),
+     times = K, unit = "seconds"))$median
+ 
+   # time_dac <- system.time({for(dummy in 1:K) taujack_dac(X, thresh=as.integer(2^9))})[[3]]/K
+   
+   dt <- data.table(rep_id=rep_id, n=n, p = p,
+                    fun = "divide-and-conquer (DAC-st)",
+                    time = time_dac)
+     
+   fwrite(dt, paste0("benchmark-p4-unif/times", s, ".csv"))
+ }, mc.cores = 10)
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
------------------------- n= 16 
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

[[5]]
NULL

[[6]]
NULL

[[7]]
NULL

[[8]]
NULL

[[9]]
NULL

[[10]]
NULL

[[11]]
NULL

[[12]]
NULL

[[13]]
NULL

[[14]]
NULL

[[15]]
NULL

[[16]]
NULL

[[17]]
NULL

[[18]]
NULL

[[19]]
NULL

[[20]]
NULL

[[21]]
NULL

[[22]]
NULL

[[23]]
NULL

[[24]]
NULL

[[25]]
NULL

[[26]]
NULL

[[27]]
NULL

[[28]]
NULL

[[29]]
NULL

[[30]]
NULL

> 
> proc.time()
     user    system   elapsed 
10742.652     5.348  2852.766 
